#textdomain wesnoth-Eliador

#define FACE_EACH_OTHER FILTER1 FILTER2
    {STORE_UNITS FACE_EACH_OTHER_store1 ({FILTER1}) no}
    {STORE_UNITS FACE_EACH_OTHER_store2 ({FILTER2}) no}

    {VARIABLE FACE_EACH_OTHER_store1[0].facing se}
    {VARIABLE FACE_EACH_OTHER_store2[0].facing sw}

    [if]
        {VARIABLE_CONDITIONAL FACE_EACH_OTHER_store1[0].x greater_than $FACE_EACH_OTHER_store2[0].x}
        [then]
            {VARIABLE FACE_EACH_OTHER_store1[0].facing sw}
            {VARIABLE FACE_EACH_OTHER_store2[0].facing se}
        [/then]
    [/if]

    [unstore_unit]
        variable=FACE_EACH_OTHER_store1[0]
        find_vacant=no
    [/unstore_unit]
    [unstore_unit]
        variable=FACE_EACH_OTHER_store2[0]
        find_vacant=no
    [/unstore_unit]

    {CLEAR_VARIABLE FACE_EACH_OTHER_store1,FACE_EACH_OTHER_store2}
#enddef

#define UNIT_MSG FILTER MSG
    [scroll_to_unit]
        {FILTER}
    [/scroll_to_unit]
    [message]
        {FILTER}
        message={MSG}
    [/message]
#enddef

#define MSG_NO_SCROLL FILTER MSG
    [message]
        {FILTER}
        message={MSG}
        scoll=no
    [/message]
#enddef

#define PARTIAL_HEAL FILTER HP
    [heal_unit]
        [filter]
            {FILTER}
        [/filter]
        amount={HP}
        animate=no
    [/heal_unit]
    {CLEAR_VARIABLE heal_amount}
#enddef

#define UNIT_NAMELESS TYPE SIDE X Y
    {NOTRAIT_UNIT {SIDE} {TYPE} {X} {Y}}
    [+unit]
        ellipse="misc/no-ellipse"
        #generate_name=no
    [/unit]
#enddef

#define UNIT_FILL TYPE SIDE X Y
    [store_locations]
        variable=locs
        x,y={X},{Y}
    [/store_locations]

    {FOREACH locs i_temp}
        {UNIT_NAMELESS {TYPE} {SIDE} $locs[$i_temp].x $locs[$i_temp].y}
    {NEXT i_temp}

    #{VARIABLE fill_count $locs.length}
    {CLEAR_VARIABLE locs,x,y}
#enddef

#define UNIT_COUNT FILTER VAR
    [store_unit]
        [filter]
            {FILTER}
        [/filter]
        variable=store
    [/store_unit]
    {VARIABLE {VAR} $store.length}
    {CLEAR_VARIABLE store}
#enddef

#define DIE_DEFEAT DEAD_FILTER SPEAKER_FILTER MSG
    [event]
        name=last breath

        [filter]
            {DEAD_FILTER}
        [/filter]

        {UNIT_MSG {SPEAKER_FILTER} {MSG}}

        [endlevel]
            result=defeat
            reveal_map=no
            carryover_report=no
        [/endlevel]
    [/event]
#enddef

#define STORE_UNITS STORE FILTER KILL
    [store_unit]
        [filter]
            {FILTER}
            {EVERYWHERE}
        [/filter]
        kill={KILL}
        variable={STORE}
        mode=always_clear
    [/store_unit]
#enddef

#define BEGIN_MODIFY STORE
    {FOREACH {STORE} MODIFY_UNIT_i}
#enddef

#define MODIFY_UNIT_VARIABLE STORE VAR VALUE
    [set_variable]
        name={STORE}[$MODIFY_UNIT_i].{VAR}
        value={VALUE}
    [/set_variable]
#enddef

#define END_MODIFY STORE
    [unstore_unit]
        variable={STORE}[$MODIFY_UNIT_i]
        find_vacant=no
    [/unstore_unit]
{NEXT MODIFY_UNIT_i}
#enddef

#define NEW_VARIATION FILTER NAME
    [object]
        [filter]
            {FILTER}
        [/filter]
        silent=yes
        [effect]
            apply_to=variation
            name={NAME}
        [/effect]
    [/object]
#enddef

#define UNSTORE STORE
    {FOREACH {STORE} store_i}
        {VARIABLE {STORE}[$store_i].moves ${STORE}[$store_i].max_moves}
        {VARIABLE {STORE}[$store_i].attacks_left ${STORE}[$store_i].max_attacks}
        [unstore_unit]
            variable={STORE}[$store_i]
            find_vacant=no
        [/unstore_unit]
    {NEXT store_i}
#enddef

#define UNSTORE_AT STORE SIDE X Y
    {FOREACH {STORE} store_i}
        {VARIABLE {STORE}[$store_i].side {SIDE}}
        {VARIABLE {STORE}[$store_i].x {X}}
        {VARIABLE {STORE}[$store_i].y {Y}}
        {VARIABLE {STORE}[$store_i].moves ${STORE}[$store_i].max_moves}
        {VARIABLE {STORE}[$store_i].attacks_left ${STORE}[$store_i].max_attacks}
        [unstore_unit]
            variable={STORE}[$store_i]
            find_vacant=yes
        [/unstore_unit]
    {NEXT store_i}
#enddef

#define HP_RESTORE X Y
    [heal_unit]
        [filter]
            x,y={X},{Y}
        [/filter]
        amount=full
        animate=no
    [/heal_unit]
    {CLEAR_VARIABLE heal_amount}
#enddef

#define ELIADOR_ENDLEVEL
    #[endlevel]
    result=victory
    linger_mode=no
    bonus=no
    carryover_percentage=0
    carryover_add=no
    carryover_report=no
    save=no
    replay_save=no
    #next_scenario=$next_home
    #[/endlevel]
#enddef

#define ELIADOR_MONSTERS
    [event]
        name=side 2 turn
        first_time_only=no

        [store_unit]
            variable=store_monster
            [filter]
                side=$side_number
            [/filter]
        [/store_unit]

        {FOREACH store_monster i_temp}
            {VARIABLE x1 $store_monster[$i_temp].x}
            {VARIABLE y1 $store_monster[$i_temp].y}
            {VARIABLE owner $store_monster[$i_temp].variables.owner}

            #If owner is adjacent, then clear goto_x and goto_y
            [if]
                [have_unit]
                    id=$owner
                    [filter_adjacent]
                        x,y=$x1,$y1
                        adjacent=n,ne,nw,s,sw,se
                    [/filter_adjacent]
                [/have_unit]
                [then]
                    {CLEAR_VARIABLE store_monster[$i_temp].goto_x}
                    {CLEAR_VARIABLE store_monster[$i_temp].goto_y}
                    [unstore_unit]
                        variable=store_monster[$i_temp]
                        find_vacant=no
                    [/unstore_unit]
                [/then]
                [else]
                    [store_unit]
                        [filter]
                            id=$owner
                        [/filter]
                        variable=store_owner
                    [/store_unit]
                    [if]
                        {VARIABLE_CONDITIONAL store_owner.length greater_than 0}
                        [then]
                            {VARIABLE store_monster[$i_temp].goto_x $store_owner.x}
                            {VARIABLE store_monster[$i_temp].goto_y $store_owner.y}
                            [unstore_unit]
                                variable=store_monster[$i_temp]
                                find_vacant=no
                            [/unstore_unit]
                        [/then]
                    [/if]
                [/else]
            [/if]
        {NEXT i_temp}
        {CLEAR_VARIABLE store_owner,store_monster,x1,y1,owner}
    [/event]
#enddef

#define ELIADOR_HUMAN_SIDE
    disallow_recall=yes
    [side]
        side=1
        controller=human
        team_name=good
        user_team_name=_"Outlaws"
        no_leader=yes
        save_id=side_1
        current_player=_"Ardella"
        persistent=yes
        gold=0
        income=-2
        recruit=""
        {FLAG_VARIANT ragged}
        color=blue
        village_gold=0
        village_support=9
    [/side]
#enddef

#define ELIADOR_AI_SIDE SIDE NAME USERNAME FLAG COLOR AI_WML
    [side]
        side={SIDE}
        controller=ai
        team_name={NAME}
        user_team_name={USERNAME}
        no_leader=yes
        gold=0
        income=-2
        village_gold=0
        village_support=9
        {FLAG_VARIANT {FLAG}}
        color={COLOR}
        recruit=""
        [ai]
            {MODIFY_AI_DELETE_CANDIDATE_ACTION {SIDE} main_loop move_leader_to_keep}
            {MODIFY_AI_DELETE_CANDIDATE_ACTION {SIDE} main_loop recruitment}
            {MODIFY_AI_DELETE_CANDIDATE_ACTION {SIDE} main_loop passive_leader_shares_keep}
            {AI_WML}
        [/ai]
    [/side]
#enddef

#define DAWN_NO_SOUND
    [time]
        id=dawn
        #textdomain wesnoth-help
        name= _ "Dawn"
        image="misc/schedule-dawn.png"
        red=-30
        green=-25
    [/time]
#enddef

#define DUSK_NO_SOUND
    [time]
        id=dusk
        #textdomain wesnoth-help
        name= _ "Dusk"
        image="misc/schedule-dusk.png"
        green=-25
        blue=-30
    [/time]
#enddef

#define ELIADOR_SCHEDULE
    [event]
        name=prestart

        {VARIABLE time $played_scenarios}
        {VARIABLE_OP time modulo 6}

        [switch]
            variable=time
            [case]
                value=0
                [replace_schedule]
                    {SECOND_WATCH}
                [/replace_schedule]
            [/case]
            [case]
                value=1
                [replace_schedule]
                    {DAWN_NO_SOUND}
                [/replace_schedule]
            [/case]
            [case]
                value=2
                [replace_schedule]
                    {MORNING}
                [/replace_schedule]
            [/case]
            [case]
                value=3
                [replace_schedule]
                    {AFTERNOON}
                [/replace_schedule]
            [/case]
            [case]
                value=4
                [replace_schedule]
                    {DUSK_NO_SOUND}
                [/replace_schedule]
            [/case]
            [case]
                value=5
                [replace_schedule]
                    {FIRST_WATCH}
                [/replace_schedule]
            [/case]
        [/switch]
        {CLEAR_VARIABLE time}
    [/event]
#enddef

#define ARDELLA_VARIATIONS
    [variation]
        #textdomain wesnoth-Eliador
        id=Ardella mounted
        variation_name=mounted
        inherit=yes
        image="units/outlaw-horsequeen.png"
        name= _ "Mounted Ardella"
        race=human
        gender=female
        {MAGENTA_IS_THE_TEAM_COLOR}
        #hitpoints=38
        movement_type=mounted
        movement=8
        experience=100
        level=2
        alignment=lawful
        advances_to=null
        {AMLA_DEFAULT}
        cost=23
        usage=fighter
        description=""
        die_sound=horse-die.ogg
        undead_variation=mounted
        {DEFENSE_ANIM "units/outlaw-horsequeen.png" "units/horseman-horse.png" {SOUND_LIST:HORSE_HIT}}
    [/variation]
    [variation]
        id=Ardella swimmer
        variation_name=swimmer
        inherit=yes
        image="units/queen-seaserpent.png"
        race=monster
        hitpoints=86
        movement_type=deepsea
        movement=6
        experience=500
        level=3
        advances_to=null
        {AMLA_DEFAULT}
        alignment=chaotic
        cost=80
        usage=fighter
        description=""
        die_sound=water-blast.wav
        {DEFENSE_ANIM "units/queen-seaserpent.png" "units/monsters/seaserpent-defend.png" hiss-hit.wav}

        [attack]
            name=fangs
            description=_"fangs"
            icon="attacks/fangs-snake.png"
            type=pierce
            range=melee
            damage=24
            number=2
        [/attack]

        [attack_anim]
            [filter_attack]
                name=sling
            [/filter_attack]
            offset=0.0
            [if]
                hits=yes
                {MISSILE_FRAME_STONE_HIT 8 -8}
                [frame]
                    begin=-400
                    end=-150
                    image="units/queen-seaserpent-sling1.png"
                    sound="sling.ogg"
                [/frame]
            [/if]
            [else]
                hits=no
                {MISSILE_FRAME_STONE_MISS 8 -8}
                [frame]
                    begin=-400
                    end=-150
                    image="units/queen-seaserpent-sling1.png"
                    sound="sling-miss.ogg"
                [/frame]
            [/else]
            [frame]
                begin=-150
                end=50
                image="units/queen-seaserpent-sling2.png"
            [/frame]
        [/attack_anim]

        [attack_anim]
            [filter_attack]
                name=fangs
            [/filter_attack]
            [frame]
                begin=-200
                end=-50
                image="units/queen-seaserpent.png"
            [/frame]
            [if]
                hits=yes
                [frame]
                    begin=-50
                    end=100
                    image="units/monsters/seaserpent-defend.png"
                    sound=claws.ogg
                [/frame]
            [/if]
            [else]
                hits=no
                [frame]
                    begin=-50
                    end=100
                    image="units/monsters/seaserpent-defend.png"
                    sound={SOUND_LIST:MISS}
                [/frame]
            [/else]
            [frame]
                begin=100
                end=200
                image="units/queen-seaserpent.png"
            [/frame]
        [/attack_anim]

        [attack_anim]
            [filter_attack]
                name=sling
            [/filter_attack]
            offset=0.0
            [if]
                hits=yes
                {MISSILE_FRAME_STONE_HIT 8 -8}
                [frame]
                    begin=-400
                    end=-150
                    image="units/queen-seaserpent-sling1.png"
                    sound="sling.ogg"
                [/frame]
            [/if]
            [else]
                hits=no
                {MISSILE_FRAME_STONE_MISS 8 -8}
                [frame]
                    begin=-400
                    end=-150
                    image="units/queen-seaserpent-sling1.png"
                    sound="sling-miss.ogg"
                [/frame]
            [/else]
            [frame]
                begin=-150
                end=50
                image="units/queen-seaserpent-sling2.png"
            [/frame]
        [/attack_anim]
    [/variation]
#enddef

#define CREATE_SOUND_SOURCE ID SOUNDS CHANCE X Y
    [sound_source]
        id={ID}
        sounds={SOUNDS}
        delay=0
        chance={CHANCE}
        check_fogged=yes
        x,y={X},{Y}
        fade_range=12
        full_range=4
        loop=-1
    [/sound_source]
#enddef

#define OPPOSITE_HEX X_CENTER Y_CENTER X Y
    # X_CENTER,Y_CENTER: position of the center of the 7 hexes
    # X,Y: position of hex for which the opposite side w.r.t X_CENTER,Y_CENTER is to be found
    # Output: opposite_x opposite_y: return variable of new coordinates

    {VARIABLE opposite_x {X_CENTER}}
    {VARIABLE_OP opposite_x sub {X}}
    {VARIABLE_OP opposite_x add {X_CENTER}}

    [store_locations]
        [filter_adjacent_location]
            x,y={X_CENTER},{Y_CENTER}
        [/filter_adjacent_location]
        [and]
            x=$opposite_x
        [/and]
        [not]
            y={Y}
        [/not]
        variable=temp
    [/store_locations]
    {VARIABLE opposite_y $temp[0].y}
    {CLEAR_VARIABLE temp}
#enddef
