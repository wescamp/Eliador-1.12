#textdomain wesnoth-Eliador

#define CLEAR_ITEMS
    {VARIABLE A 6}
    [while]
        {VARIABLE_CONDITIONAL A less_than 21}
        [do]
            {VARIABLE B 6}
            [while]
                {VARIABLE_CONDITIONAL B less_than 21}
                [do]
                    [remove_item]
                        x,y=$A,$B
                    [/remove_item]
                    {VARIABLE_OP B add 2}
                [/do]
            [/while]
            {CLEAR_VARIABLE B}
            {VARIABLE_OP A add 2}
        [/do]
    [/while]
    {CLEAR_VARIABLE A}
#enddef

#define CHECK_ALL_MOVES SIDE
    #Check corners
    {CHECK_MOVE 6 6 {SIDE}}
    {CHECK_MOVE 20 20 {SIDE}}
    {CHECK_MOVE 6 20 {SIDE}}
    {CHECK_MOVE 20 6 {SIDE}}

    #Check central corners
    {CHECK_MOVE 10 10 {SIDE}}
    {CHECK_MOVE 16 16 {SIDE}}
    {CHECK_MOVE 16 10 {SIDE}}
    {CHECK_MOVE 10 16 {SIDE}}

    #Check edges not adjacent to corners
    {CHECK_MOVE 6 10 {SIDE}}
    {CHECK_MOVE 6 12 {SIDE}}
    {CHECK_MOVE 6 14 {SIDE}}
    {CHECK_MOVE 6 16 {SIDE}}
    {CHECK_MOVE 20 10 {SIDE}}
    {CHECK_MOVE 20 12 {SIDE}}
    {CHECK_MOVE 20 14 {SIDE}}
    {CHECK_MOVE 20 16 {SIDE}}
    {CHECK_MOVE 10 6 {SIDE}}
    {CHECK_MOVE 12 6 {SIDE}}
    {CHECK_MOVE 14 6 {SIDE}}
    {CHECK_MOVE 16 6 {SIDE}}
    {CHECK_MOVE 10 20 {SIDE}}
    {CHECK_MOVE 12 20 {SIDE}}
    {CHECK_MOVE 14 20 {SIDE}}
    {CHECK_MOVE 16 20 {SIDE}}

    #Check central locations not adjacent to edges
    {CHECK_MOVE 12 10 {SIDE}}
    {CHECK_MOVE 14 10 {SIDE}}
    {CHECK_MOVE 16 12 {SIDE}}
    {CHECK_MOVE 16 14 {SIDE}}
    {CHECK_MOVE 10 12 {SIDE}}
    {CHECK_MOVE 10 14 {SIDE}}
    {CHECK_MOVE 12 16 {SIDE}}
    {CHECK_MOVE 14 16 {SIDE}}

    #Check adjacent to edges
    {CHECK_MOVE 10 8 {SIDE}}
    {CHECK_MOVE 12 8 {SIDE}}
    {CHECK_MOVE 14 8 {SIDE}}
    {CHECK_MOVE 16 8 {SIDE}}
    {CHECK_MOVE 10 18 {SIDE}}
    {CHECK_MOVE 12 18 {SIDE}}
    {CHECK_MOVE 14 18 {SIDE}}
    {CHECK_MOVE 16 18 {SIDE}}
    {CHECK_MOVE 8 10 {SIDE}}
    {CHECK_MOVE 8 12 {SIDE}}
    {CHECK_MOVE 8 14 {SIDE}}
    {CHECK_MOVE 8 16 {SIDE}}
    {CHECK_MOVE 18 10 {SIDE}}
    {CHECK_MOVE 18 12 {SIDE}}
    {CHECK_MOVE 18 14 {SIDE}}
    {CHECK_MOVE 18 16 {SIDE}}

    #Check edge locations adjacent to corners
    {CHECK_MOVE 8 6 {SIDE}}
    {CHECK_MOVE 6 8 {SIDE}}
    {CHECK_MOVE 18 6 {SIDE}}
    {CHECK_MOVE 20 8 {SIDE}}
    {CHECK_MOVE 6 18 {SIDE}}
    {CHECK_MOVE 8 20 {SIDE}}
    {CHECK_MOVE 18 20 {SIDE}}
    {CHECK_MOVE 20 18 {SIDE}}

    #Check locations diagonal and adjacent to corners
    {CHECK_MOVE 8 8 {SIDE}}
    {CHECK_MOVE 18 8 {SIDE}}
    {CHECK_MOVE 8 18 {SIDE}}
    {CHECK_MOVE 18 18 {SIDE}}
#enddef

#define CHECK_DIR X Y SIDE X_DIR Y_DIR
    {VARIABLE X {X}}
    {VARIABLE Y {Y}}
    {VARIABLE_OP X add {X_DIR}}
    {VARIABLE_OP Y add {Y_DIR}}

    #Count number of other side's checkers
    {VARIABLE enemies 0}
    [while]
        [have_unit]
            [not]
                side={SIDE}
            [/not]
            x,y=$X,$Y
        [/have_unit]
        [do]
            {VARIABLE_OP enemies add 1}
            {VARIABLE_OP X add {X_DIR}}
            {VARIABLE_OP Y add {Y_DIR}}
        [/do]
    [/while]

    #If other side has more than 1 checker and your unit is next
    [if]
        {VARIABLE_CONDITIONAL enemies greater_than 0}
        [have_unit]
            side={SIDE}
            x,y=$X,$Y
        [/have_unit]
        [then]
            #This is a valid direction, so add it
            {VARIABLE valid_dir_$valid_dir_count|_x {X_DIR}}
            {VARIABLE valid_dir_$valid_dir_count|_y {Y_DIR}}
            {VARIABLE_OP valid_dir_count add 1}

            # prepare variables
            {VARIABLE valid_move yes}
            {VARIABLE valid_x {X}}
            {VARIABLE valid_y {Y}}
            {VARIABLE valid_side {SIDE}}
        [/then]
    [/if]
    {CLEAR_VARIABLE X,Y,enemies}
#enddef

#define CHECK_MOVE X Y SIDE
    [if]
        {VARIABLE_CONDITIONAL valid_move equals no}
        [not]
            [have_unit]
                x,y={X},{Y}
            [/have_unit]
        [/not]
        [then]
            #Check all directions
            {CHECK_DIR {X} {Y} {SIDE} -2 -2}
            {CHECK_DIR {X} {Y} {SIDE} -2 0}
            {CHECK_DIR {X} {Y} {SIDE} -2 2}
            {CHECK_DIR {X} {Y} {SIDE} 0 -2}
            {CHECK_DIR {X} {Y} {SIDE} 0 2}
            {CHECK_DIR {X} {Y} {SIDE} 2 -2}
            {CHECK_DIR {X} {Y} {SIDE} 2 0}
            {CHECK_DIR {X} {Y} {SIDE} 2 2}
        [/then]
    [/if]
#enddef

#define MOVE_TO_BOARD INSERT_CHECKER_WML
    [if]
        {VARIABLE_CONDITIONAL valid_move equals yes}
        [then]
            #Place unit on the board
            {INSERT_CHECKER_WML}

            {VARIABLE_OP checker_count add 1}
            #Change sides in all valid directions
            [while]
                {VARIABLE_CONDITIONAL valid_dir_count greater_than 0}
                [do]
                    {VARIABLE X $valid_x}
                    {VARIABLE Y $valid_y}

                    {VARIABLE_OP valid_dir_count sub 1}
                    {VARIABLE_OP x_dir to_variable valid_dir_$valid_dir_count|_x}
                    {VARIABLE_OP y_dir to_variable valid_dir_$valid_dir_count|_y}

                    #Change sides of other side's units
                    {VARIABLE_OP X add $x_dir}
                    {VARIABLE_OP Y add $y_dir}
                    [while]
                        [have_unit]
                            [not]
                                side=$valid_side
                            [/not]
                            x,y=$X,$Y
                        [/have_unit]
                        [do]
                            {MODIFY_UNIT (x,y=$X,$Y) side $valid_side}
                            [capture_village]
                                side=$valid_side
                                x,y=$X,$Y
                            [/capture_village]
                            {VARIABLE_OP X add $x_dir}
                            {VARIABLE_OP Y add $y_dir}
                        [/do]
                    [/while]
                [/do]
            [/while]
        [/then]
        [else]
            {IF_VAR none_played greater_than 0 (
                [then]
                    {VARIABLE none_played yes}
                [/then]
                [else]
                    {VARIABLE_OP none_played add 1}
                [/else]
            )}
        [/else]
    [/if]
#enddef

#define CHECK_GAME_OVER
    {UNIT_COUNT (
        side=1
        canrecruit=no
        {EVERYWHERE}
    ) side_1_units}

    {UNIT_COUNT (
        side=2
        canrecruit=no
        {EVERYWHERE}
    ) side_2_units}

    {REMOVE_LABEL 9 2}
    {SET_LABEL 9 2 "<span color='blue'>$side_1_units|</span> <b>:</b> <span color='red'>$side_2_units|</span>"}

    {IF_VAR side_1_units numerical_equals 0 (
        [then]
            [endlevel]
                result=defeat
            [/endlevel]
        [/then]
    )}

    {IF_VAR side_2_units numerical_equals 0 (
        [then]
            [endlevel]
                {ELIADOR_ENDLEVEL}
                linger_mode=yes
                next_scenario=$next_home
            [/endlevel]
        [/then]
    )}

    [if]
        {VARIABLE_CONDITIONAL checker_count equals 60}
        [or]
            {VARIABLE_CONDITIONAL none_played equals yes}
        [/or]
        [then]
            [if]
                {VARIABLE_CONDITIONAL side_1_units greater_than_equal_to $side_2_units}
#ifdef HARD
                [and]
                    [have_unit]
                        side=1
                        id=Anna
                    [/have_unit]
                    [have_unit]
                        side=1
                        id=Zeke
                    [/have_unit]
                [/and]
#endif
#ifdef EASY
                [and]
                    [have_unit]
                        side=1
                        id=Anna
                    [/have_unit]
                    [or]
                        [have_unit]
                            side=1
                            id=Zeke
                        [/have_unit]
                    [/or]
                [/and]
#endif
                [then]
                    [message]
                        image="wesnoth-icon.png"
                        caption= _ "You win!"
                        message= _ "Ardella: $side_1_units
Othello: $side_2_units"
                    [/message]
                    [endlevel]
                        {ELIADOR_ENDLEVEL}
                        linger_mode=yes
                        next_scenario=$next_home
                    [/endlevel]
                [/then]
                [else]
                    [message]
                        image="wesnoth-icon.png"
                        caption= _ "You lost."
                        message= _ "Ardella: $side_1_units
Othello: $side_2_units"
                    [/message]
                    [endlevel]
                        result=defeat
                    [/endlevel]
                [/else]
            [/if]
        [/then]
    [/if]
    {CLEAR_VARIABLE side_1_units,side_2_units}
#enddef

#define RECALL_OR_CREATE_UNIT X Y TYPE
    [if]
        [have_unit]
            side=1
            x,y=recall,recall
            search_recall_list=yes
        [/have_unit]
        [then]
            [store_unit]
                [filter]
                    x,y=recall,recall
                [/filter]
                variable=temp
            [/store_unit]
            {RANDOM 1..$temp.length}
            {VARIABLE_OP random sub 1}
            [recall]
                side=1
                id=$temp[$random].id
                x,y={X},{Y}
            [/recall]
        [/then]
        [else]
            {UNIT_NAMELESS {TYPE} 1 {X} {Y}}
        [/else]
    [/if]
    {CLEAR_VARIABLE temp,random}
#enddef

[scenario]
    id=eliador-illien
    next_scenario=eliador-home
    name= _ "Illien"
    victory_when_enemies_defeated=no
    disallow_recall=yes
    map_data="{~add-ons/Eliador/maps/eliador-illien.map}"
    turns=-1

    {INTRO ILLIEN (_"The swamps of Illien were a dangerous and mystic place. Not sure if we could get help here.")}
    {INTRO_AND_SCENARIO_MUSIC "nunc_dimittis.ogg" "sad.ogg"}
    {EXTRA_SCENARIO_MUSIC "love_theme.ogg"}

    {ELIADOR_SCHEDULE}

    {ELIADOR_HUMAN_SIDE}
    {ELIADOR_AI_SIDE 2 bad (_"Othello") undead red (
        ai_algorithm=idle_ai
    )}

    {ELIADOR_AI_SIDE 3 good,bad (_"Monsters") ragged teal ()}
    [+side]
        controller=null
    [/side]

    [event]
        name=prestart

        [objectives]
            side=1
            summary= _ "Play a game of Reversi with Othello"
            [objective]
                description= _ "Capture more units than Othello does"
                condition=win
            [/objective]
            [objective]
                description= _ "Othello finish with more units"
                condition=lose
            [/objective]
#ifdef EASY
            [objective]
                description= _ "You lose <b>both</b> Anna and Zeke"
                condition=lose
            [/objective]
#endif
#ifdef HARD
            [objective]
                description= _ "You lose <b>either</b> Anna or Zeke"
                condition=lose
            [/objective]
#endif
            notes_string=_"<b>How to Play</b>"
            [note]
                description=_"A move is valid if Othello's units will be between two of yours. To place a unit on the board:"
            [/note]
            [note]
                description=_"(1) Move Ardella to a ruined castle at the bottom to select the column"
            [/note]
            [note]
                description=_"(2) Move Ardella again to a ruined castle now at the left to select the row"
            [/note]
            [note]
                description=_"(3) If the move is valid an unit will be recalled at the given place"
            [/note]
            [note]
                description=_"(4) And any enemy units standing between two of yours will swap side."
            [/note]
            [note]
                description=_"(5) The game continues until the board is full, or neither leader could do a move."
            [/note]
        [/objectives]

        {VARIABLE scenario_locs[3].played yes}

        #Unlock Varad if Balas played
        [if]
            {VARIABLE_CONDITIONAL scenario_locs[6].played equals yes}
            [then]
                {VARIABLE scenario_locs[8].playable yes}
            [/then]
        [/if]

        {UNSTORE_AT ardella_store 1 13 5}
        {UNSTORE_AT anna_store 1 12 12}
        {UNSTORE_AT zeke_store 1 14 14}

        {UNSTORE_AT heldurin_store 1 recall recall}
        {UNSTORE_AT glorienda_store 1 recall recall}
        #{UNSTORE_AT horseman_store 1 recall recall}

        {NAMED_UNIT 2 ("Necromancer") 13 22 Othello (_"Othello") (
            canrecruit=yes
            ellipse="misc/ellipse-hero"
        )}

        {CLEAR_VARIABLE ardella_store,anna_store,zeke_store,heldurin_store,glorienda_store}
    [/event]

    [event]
        name=start

        {UNIT_MSG (id="Othello") ( _ "Ardella, I'm sure you're aware of the law of Illien. Are you prepared?")}
        {UNIT_MSG (id="Ardella") ( _ "You must know that we are about to be invaded. We don't have time for your games. Will you help us repel the invasion?")}
        {UNIT_MSG (id="Othello") ( _ "If you do not obey the law of Illien, my undead will annihilate your pathetic army. Now, let's begin, shall we?")}

        #Anna, Zeke are your initial checkers
        {UNIT_MSG (id=Zeke) ( _ "Momma, what's happening? I can't move!")}
        [redraw][/redraw]

        [delay]
            time=500
        [/delay]

        #Othello's first two checkers appear
        {UNIT_NAMELESS Revenant 2 12 14}
        [+unit]
            animate=yes
        [/unit]
        {UNIT_NAMELESS ("Bone Shooter") 2 14 12}
        [+unit]
            animate=yes
        [/unit]

        {UNIT_MSG (id="Anna") ( _ "Ahh!")}

        {STORE_UNITS ardella_mod_store (id="Ardella") no}

        #Backup Ardella  before modifying her
        {STORE_UNITS ardella_store (id="Ardella") yes}

        #Ensure that Ardella can only move inside castle
        {VARIABLE ardella_mod_store.movement_costs.swamp_water 99}
        {VARIABLE ardella_mod_store.movement_costs.flat 99}
        {VARIABLE ardella_mod_store.movement_costs.forest 99}
        {VARIABLE ardella_mod_store.movement_costs.sand 99}
        {VARIABLE ardella_mod_store.movement_costs.castle 1}
        {VARIABLE ardella_mod_store.max_moves 24}
        {VARIABLE ardella_mod_store.moves 24}
        [unstore_unit]
            variable=ardella_mod_store
        [/unstore_unit]
        {CLEAR_VARIABLE ardella_mod_store}

        #Monsters spawn in family's place
        {UNSTORE_AT anwar_store 3 19 2}
        {CLEAR_VARIABLE anwar_store}
    [/event]

    [event]
        name=new turn
        first_time_only=no

        # teleport the leaders back to the keep
        {TELEPORT_UNIT (id="Ardella") 13 5}
        {TELEPORT_UNIT (id="Othello") 13 22}

        {CLEAR_VARIABLE none_played}

        {VARIABLE valid_dir_count 0}
        {VARIABLE valid_move no}
        {VARIABLE col -1}
        {VARIABLE row -1}
    [/event]

    [event]
        name=turn refresh
        first_time_only=no
        {MODIFY_UNIT (canrecruit=no) moves 0}
        {MODIFY_UNIT (canrecruit=yes) moves 12}
    [/event]

    [event]
        name=moveto
        first_time_only=no

        [filter]
            id=Ardella
        [/filter]

        {MODIFY_UNIT (id="Ardella") moves 24}

        [if]
            [have_location]
                x,y=$x1,$y1
                terrain=Chr
            [/have_location]
            [then]
                #If at column castle, go to row castle
                [if]
                    {VARIABLE_CONDITIONAL x1 less_than 22}
                    [then]
                        {VARIABLE col $x1}
                        {CLEAR_ITEMS}

                        {PLACE_IMAGE "items/red-hex.png" $x1 6}
                        {PLACE_IMAGE "items/red-hex.png" $x1 8}
                        {PLACE_IMAGE "items/red-hex.png" $x1 10}
                        {PLACE_IMAGE "items/red-hex.png" $x1 12}
                        {PLACE_IMAGE "items/red-hex.png" $x1 14}
                        {PLACE_IMAGE "items/red-hex.png" $x1 16}
                        {PLACE_IMAGE "items/red-hex.png" $x1 18}
                        {PLACE_IMAGE "items/red-hex.png" $x1 20}

                        [sound]
                            name=magic-dark-miss.ogg
                        [/sound]
                        [delay]
                            time=500
                        [/delay]

                        {TELEPORT_TILE $x1 $y1 22 13}
                        [scroll_to_unit]
                            id=Ardella
                        [/scroll_to_unit]
                    [/then]

                    #If at row castle, go to column castle
                    [else]
                        {VARIABLE row $y1}
                        {CLEAR_ITEMS}

                        {PLACE_IMAGE "items/blue-hex.png" 6 $y1}
                        {PLACE_IMAGE "items/blue-hex.png" 8 $y1}
                        {PLACE_IMAGE "items/blue-hex.png" 10 $y1}
                        {PLACE_IMAGE "items/blue-hex.png" 12 $y1}
                        {PLACE_IMAGE "items/blue-hex.png" 14 $y1}
                        {PLACE_IMAGE "items/blue-hex.png" 16 $y1}
                        {PLACE_IMAGE "items/blue-hex.png" 18 $y1}
                        {PLACE_IMAGE "items/blue-hex.png" 20 $y1}

                        [sound]
                            name=magic-dark.ogg
                        [/sound]
                        [delay]
                            time=500
                        [/delay]
                        {TELEPORT_TILE $x1 $y1 13 5}
                        [scroll_to_unit]
                            id=Ardella
                        [/scroll_to_unit]
                    [/else]
                [/if]
            [/then]
        [/if]
        [if]
            {VARIABLE_CONDITIONAL col greater_than 0}
            {VARIABLE_CONDITIONAL row greater_than 0}
            [then]
                {CHECK_MOVE $col $row 1}
            [/then]
        [/if]

        {IF_VAR valid_move equals yes (
            [then]
                [end_turn][/end_turn]
            [/then]
        )}
    [/event]

    [event]
        name=side 1 turn end
        first_time_only=no

        {IF_VAR valid_move not_equals yes (
            [then]
                {CHECK_ALL_MOVES 1}
            [/then]
        )}

        {MOVE_TO_BOARD (
            [scroll_to]
                x,y=$valid_x,$valid_y
            [/scroll_to]
            [delay]
                time=1000
            [/delay]
            [sound]
                name={SOUND_LIST:GRYPHON_HIT}
            [/sound]
            {VARIABLE n $turn_number}
            {VARIABLE_OP n modulo 3}
            [switch]
                variable=n
                [case]
                    value=0
                    {RECALL_OR_CREATE_UNIT $valid_x $valid_y "Thief"}
                [/case]
                [else]
                    {RECALL_OR_CREATE_UNIT $valid_x $valid_y "Thug"}
                [/else]
            [/switch]
            {CLEAR_VARIABLE n}
            [delay]
                time=500
            [/delay]
        )}
        {CLEAR_ITEMS}
        {CHECK_GAME_OVER}
    [/event]

    [event]
        name=side 2 turn
        first_time_only=no

        #Find best AI move
        {VARIABLE valid_move no}
        {CHECK_ALL_MOVES 2}

        {MOVE_TO_BOARD (
            [scroll_to_unit]
                id="Othello"
            [/scroll_to_unit]
            [delay]
                time=1000
            [/delay]
            {MOVE_UNIT (id=Othello) $valid_x 22}
            [sound]
                name="magic-dark-miss.ogg"
            [/sound]
            [delay]
                time=1000
            [/delay]
            {TELEPORT_UNIT (id="Othello") 4 13}
            [scroll_to_unit]
                id="Othello"
            [/scroll_to_unit]
            [delay]
                time=1000
            [/delay]
            {MOVE_UNIT (id=Othello) 4 $valid_y}
            [delay]
                time=1000
            [/delay]
            [scroll_to]
                x,y=$valid_x,$valid_y
            [/scroll_to]
            [delay]
                time=1000
            [/delay]
            [sound]
                name={SOUND_LIST:ZOMBIE_HIT}
            [/sound]
            {VARIABLE n $turn_number}
            {VARIABLE_OP n modulo 3}
            [switch]
                variable=n
                [case]
                    value=0
                    {UNIT_NAMELESS ("Ghoul") 2 $valid_x $valid_y}
                [/case]
                [else]
                    {UNIT_NAMELESS ("Skeleton Archer") 2 $valid_x $valid_y}
                [/else]
            [/switch]
            {CLEAR_VARIABLE n}
            [delay]
                time=1000
            [/delay]
        )}
        {CHECK_GAME_OVER}
        [end_turn][/end_turn]
    [/event]

    [event]
        name=defeat
        {UNIT_MSG (id=Othello) ( _ "You've sacrificed your children in an attempt to save your soldiers. Your heart is even colder than mine.")}
    [/event]

    [event]
        name=victory

        {CLEAR_VARIABLE x_dir,y_dir,valid_dir_count,X,Y,valid_x,valid_y,mod,valid_move,none_played,checker_count,col,row,valid_side}
        {CLEAR_VARIABLE valid_dir_0_x,valid_dir_1_x,valid_dir_2_x,valid_dir_3_x,valid_dir_4_x}
        {CLEAR_VARIABLE valid_dir_0_y,valid_dir_1_y,valid_dir_2_y,valid_dir_3_y,valid_dir_4_y}

        {UNIT_MSG (id="Othello") ( _ "Well done, Ardella, you've protected your children. You can keep the skeletons that you've won, and I'll keep any man or creature that you've lost. Goodbye.")}

        #Store units that Othello won
        {STORE_UNITS othello_slave_store (
            side=2
            [not]
                id=Othello
            [/not]
        ) yes}

        #Note: Ardella already stored (backup)
        [kill]
            id=Ardella
        [/kill]

        {STORE_UNITS zeke_store (id="Zeke") yes}
        {STORE_UNITS anna_store (id="Anna") yes}
        {STORE_UNITS anwar_store (side=3) yes}

        #{STORE_UNITS horseman_store (
        #    side=1
        #    type=Horseman
        #) yes}

        {STORE_UNITS glorienda_store (
            side=1
            race="elf"
        ) yes}

        {STORE_UNITS illien_store (
            side=1
            [not]
                id="Ardella"
            [/not]
            [not]
                id="Anna"
            [/not]
            [not]
                id="Zeke"
            [/not]
        ) yes}
    [/event]
[/scenario]
